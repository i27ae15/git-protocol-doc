"use strict";(self.webpackChunkgit_protocol=self.webpackChunkgit_protocol||[]).push([[387],{3039:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"git-protocol","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"GIT-Protocol","href":"/git-protocol-doc/docs/git-protocol/intro","docId":"git-protocol/intro","unlisted":false},{"type":"link","label":"1. Discovering References","href":"/git-protocol-doc/docs/git-protocol/discovering-references","docId":"git-protocol/discovering-references","unlisted":false},{"type":"link","label":"2. Git-Upload Service","href":"/git-protocol-doc/docs/git-protocol/git-upload","docId":"git-protocol/git-upload","unlisted":false},{"type":"link","label":"3. Pack Header","href":"/git-protocol-doc/docs/git-protocol/pack-header","docId":"git-protocol/pack-header","unlisted":false},{"type":"link","label":"4. Object Header","href":"/git-protocol-doc/docs/git-protocol/object-header","docId":"git-protocol/object-header","unlisted":false},{"type":"link","label":"5. Parsing REF_DELTA","href":"/git-protocol-doc/docs/git-protocol/ref-delta","docId":"git-protocol/ref-delta","unlisted":false},{"type":"link","label":"6. Reading Pack File","href":"/git-protocol-doc/docs/git-protocol/reading-pack-file","docId":"git-protocol/reading-pack-file","unlisted":false}]},{"type":"category","label":"objects","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Blob","href":"/git-protocol-doc/docs/objects/blob","docId":"objects/blob","unlisted":false},{"type":"link","label":"Tree","href":"/git-protocol-doc/docs/objects/tree","docId":"objects/tree","unlisted":false},{"type":"link","label":"Commit","href":"/git-protocol-doc/docs/objects/commit","docId":"objects/commit","unlisted":false}]}]},"docs":{"git-protocol/discovering-references":{"id":"git-protocol/discovering-references","title":"1. Discovering References","description":"The first step on the git protocol is to stablish the tell the server side tha will want to know the state of git","sidebar":"tutorialSidebar"},"git-protocol/git-upload":{"id":"git-protocol/git-upload","title":"2. Git-Upload Service","description":"At this point we have in our power, the sha1 that corresponds to the head pack file, now is time to request git to return it for us,","sidebar":"tutorialSidebar"},"git-protocol/intro":{"id":"git-protocol/intro","title":"GIT-Protocol","description":"This section will talk about how the git smart protocol works and the steps that are needed to be implemented.","sidebar":"tutorialSidebar"},"git-protocol/object-header":{"id":"git-protocol/object-header","title":"4. Object Header","description":"In the pack file, each object includes a header that indicates two key pieces of information:","sidebar":"tutorialSidebar"},"git-protocol/pack-header":{"id":"git-protocol/pack-header","title":"3. Pack Header","description":"After we have received the pack file, we can see that this is separated in three parts","sidebar":"tutorialSidebar"},"git-protocol/reading-pack-file":{"id":"git-protocol/reading-pack-file","title":"6. Reading Pack File","description":"At this point, we have all the necessary components to start reading the pack file. Parsing the OFS_DELTA is not required to complete this stage,","sidebar":"tutorialSidebar"},"git-protocol/ref-delta":{"id":"git-protocol/ref-delta","title":"5. Parsing REF_DELTA","description":"It\'s time to talk about a new object, the REF_DELTA; this objects objective is designed to minimize storage requirements by referencing existing data instead of storing duplicate content.","sidebar":"tutorialSidebar"},"objects/blob":{"id":"objects/blob","title":"Blob","description":"A Blob object in Git represents the raw content of a file. It is the simplest object type in Git, storing the uncompressed content of a file prefixed by a header.","sidebar":"tutorialSidebar"},"objects/commit":{"id":"objects/commit","title":"Commit","description":"A Commit object in Git represents a snapshot of the repository\'s state. It is stored as a binary blob in the Git object database and links to its corresponding Tree and parent commits (if any).","sidebar":"tutorialSidebar"},"objects/tree":{"id":"objects/tree","title":"Tree","description":"A Tree object in Git represents a directory. Its contents include other tree objects and blob objects, allowing Git to keep track of the names and hierarchical structure of files and folders in a project.","sidebar":"tutorialSidebar"}}}}')}}]);