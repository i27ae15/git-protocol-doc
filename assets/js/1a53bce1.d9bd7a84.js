"use strict";(self.webpackChunkgit_protocol=self.webpackChunkgit_protocol||[]).push([[658],{7030:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"objects/blob","title":"Blob","description":"A Blob object in Git represents the raw content of a file. It is the simplest object type in Git, storing the uncompressed content of a file prefixed by a header.","source":"@site/docs/objects/blob.md","sourceDirName":"objects","slug":"/objects/blob","permalink":"/git-protocol-doc/docs/objects/blob","draft":false,"unlisted":false,"editUrl":"https://github.com/i27ae15/git-protocol-doc/docs/objects/blob.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"6. Reading Pack File","permalink":"/git-protocol-doc/docs/git-protocol/reading-pack-file"},"next":{"title":"Tree","permalink":"/git-protocol-doc/docs/objects/tree"}}');var i=t(4848),s=t(8453);const r={sidebar_position:1},l="Blob",c={},d=[{value:"Structure of a Blob Object",id:"structure-of-a-blob-object",level:2},{value:"Header",id:"header",level:3},{value:"Content",id:"content",level:3},{value:"Notes on Size Calculation",id:"notes-on-size-calculation",level:3},{value:"Example",id:"example",level:3},{value:"Compression",id:"compression",level:3},{value:"Key Characteristics of Blob Objects",id:"key-characteristics-of-blob-objects",level:2},{value:"Decoding a Blob Object",id:"decoding-a-blob-object",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"blob",children:"Blob"})}),"\n",(0,i.jsx)(n.p,{children:"A Blob object in Git represents the raw content of a file. It is the simplest object type in Git, storing the uncompressed content of a file prefixed by a header."}),"\n",(0,i.jsx)(n.h2,{id:"structure-of-a-blob-object",children:"Structure of a Blob Object"}),"\n",(0,i.jsx)(n.h3,{id:"header",children:"Header"}),"\n",(0,i.jsx)(n.p,{children:"The header of a Blob object consists of:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object Type"}),": Always ",(0,i.jsx)(n.code,{children:"blob"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Size"}),": The size of the file content in bytes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Null Byte Separator"}),": A null byte (",(0,i.jsx)(n.code,{children:"\\x00"}),") separating the header from the content."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"content",children:"Content"}),"\n",(0,i.jsx)(n.p,{children:"The main body contains the raw, uncompressed file content. The structure can be represented as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"blob <size>\\x00<content>\\x00\n"})}),"\n",(0,i.jsx)(n.h3,{id:"notes-on-size-calculation",children:"Notes on Size Calculation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The header title (",(0,i.jsx)(n.code,{children:"blob"}),") and the final null byte ",(0,i.jsx)(n.strong,{children:"do not count"})," towards the total size."]}),"\n",(0,i.jsxs)(n.li,{children:["The first null byte (",(0,i.jsx)(n.code,{children:"\\x00"}),") ",(0,i.jsx)(n.strong,{children:"is included"})," in the size calculation."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Given a file with the content:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Run, Forrest, run!\n"})}),"\n",(0,i.jsx)(n.p,{children:"The Blob object would appear as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"blob 19\\x00Run, Forrest, run!\\x00\n"})}),"\n",(0,i.jsx)(n.h3,{id:"compression",children:"Compression"}),"\n",(0,i.jsx)(n.p,{children:"Like all objects in Git, the Blob content is compressed using the zlib algorithm before being stored. This compression reduces the storage size and ensures efficient data management."}),"\n",(0,i.jsx)(n.h2,{id:"key-characteristics-of-blob-objects",children:"Key Characteristics of Blob Objects"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Raw Content Storage"}),": Unlike Tree or Commit objects, Blob objects do not include metadata such as filenames or directories."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Uniqueness via SHA-1"}),": Each Blob is identified by a SHA-1 hash generated from its content and header. This ensures content integrity and prevents duplication."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Independence from Filesystem"}),": Blobs store only the content of files, allowing Git to track changes to file content without being affected by file renames or moves."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"decoding-a-blob-object",children:"Decoding a Blob Object"}),"\n",(0,i.jsx)(n.p,{children:"To interpret a Blob object:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extract the Header"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Identify the object type (",(0,i.jsx)(n.code,{children:"blob"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Determine the size of the content."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parse the Content"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Read the file content following the header."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle Compression"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Decompress the content if reading directly from a Git repository."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By adhering to this structure, Git ensures efficient storage and accurate tracking of file contents across versions."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);